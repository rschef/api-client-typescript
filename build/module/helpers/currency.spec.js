import { createCurrencyAmount, createCurrencyPrice, normalizeAmountForMarket, normalizePriceForMarket, normalizeAmountForMarketPrecision, getPrecisionFromMarketString } from '../helpers';
import { CryptoCurrency } from '../constants/currency';
import { defaultMarkets } from '../helpers/markets.default';
const neo_gas = defaultMarkets.neo_gas;
// neo_gas: {
//   aUnit: 'neo',
//   aUnitPrecision: 5,
//   bUnit: 'gas',
//   bUnitPrecision: 5,
//   minTickSize: '0.01',
//   minTradeIncrement: '0.001',
//   minTradeIncrementB: '0.01',
//   minTradeSize: '0.50000',
//   minTradeSizeB: '1.00000',
//   name: 'neo_gas',
//   priceGranularity: 12,
//   status: 'RUNNING'
// },
test('normalizes the amount according to the given trade size', async () => {
    expect(normalizeAmountForMarketPrecision('10', 2)).toBe('10.00');
    expect(normalizeAmountForMarketPrecision('10.001', 2)).toBe('10.00');
    expect(normalizeAmountForMarketPrecision('10.001', 6)).toBe('10.001000');
});
test('get precision works as expected', async () => {
    expect(getPrecisionFromMarketString('0.01')).toBe(2);
    expect(getPrecisionFromMarketString('0.001')).toBe(3);
    expect(getPrecisionFromMarketString('10')).toBe(0);
    expect(getPrecisionFromMarketString('1')).toBe(0);
    expect(getPrecisionFromMarketString('0')).toBe(0);
    expect(getPrecisionFromMarketString('0.50000')).toBe(5);
    expect(getPrecisionFromMarketString('1.0e-6')).toBe(6);
    expect(getPrecisionFromMarketString('1.0e+6')).toBe(0);
    expect(getPrecisionFromMarketString('125.2569782548')).toBe(10);
});
test('normalizes currency amount', async () => {
    let currencyAmount = createCurrencyAmount('1', CryptoCurrency.NEO);
    let result = normalizeAmountForMarket(currencyAmount, neo_gas);
    expect(result.amount).toBe('1.000');
    currencyAmount = createCurrencyAmount('50', CryptoCurrency.GAS);
    result = normalizeAmountForMarket(currencyAmount, neo_gas);
    expect(result.amount).toBe('50.00');
    // lower than min amount for gas should be set to min amount
    currencyAmount = createCurrencyAmount('.1', CryptoCurrency.GAS);
    result = normalizeAmountForMarket(currencyAmount, neo_gas);
    expect(result.amount).toBe('1.00');
    // same for neo
    currencyAmount = createCurrencyAmount('.1', CryptoCurrency.NEO);
    result = normalizeAmountForMarket(currencyAmount, neo_gas);
    expect(result.amount).toBe('0.500');
});
test('normalizes currency price', async () => {
    // use minTradeIncrement ( which is 0.001)
    let currencyPrice = createCurrencyPrice('0.01', CryptoCurrency.NEO, CryptoCurrency.GAS);
    let result = normalizePriceForMarket(currencyPrice, neo_gas);
    expect(result.amount).toBe('0.010');
    // for gas it is 0.01
    // so normalizePriceForMarket needs to use minTradeIncrementB
    currencyPrice = createCurrencyPrice('0.01', CryptoCurrency.GAS, CryptoCurrency.NEO);
    result = normalizePriceForMarket(currencyPrice, neo_gas);
    expect(result.amount).toBe('0.01');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3kuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL2N1cnJlbmN5LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLG9CQUFvQixFQUNwQixtQkFBbUIsRUFDbkIsd0JBQXdCLEVBQ3hCLHVCQUF1QixFQUN2QixpQ0FBaUMsRUFDakMsNEJBQTRCLEVBQzdCLE1BQU0sWUFBWSxDQUFBO0FBQ25CLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUV0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFFM0QsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQWlCLENBQUE7QUFFaEQsYUFBYTtBQUNiLGtCQUFrQjtBQUNsQix1QkFBdUI7QUFDdkIsa0JBQWtCO0FBQ2xCLHVCQUF1QjtBQUN2Qix5QkFBeUI7QUFDekIsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLHFCQUFxQjtBQUNyQiwwQkFBMEI7QUFDMUIsc0JBQXNCO0FBQ3RCLEtBQUs7QUFFTCxJQUFJLENBQUMseURBQXlELEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDekUsTUFBTSxDQUFDLGlDQUFpQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNoRSxNQUFNLENBQUMsaUNBQWlDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BFLE1BQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDMUUsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFD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